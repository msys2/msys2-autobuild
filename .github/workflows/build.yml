name: 'build'

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0/4 * * *'

permissions:
  contents: write

concurrency: nope

jobs:

  schedule:
    runs-on: windows-latest

    outputs:
      build-plan: ${{ steps.check.outputs.build-plan }}

    steps:

    - name: Runner details
      run: |
        Get-PSDrive -PSProvider FileSystem
        Get-CIMInstance -Class Win32_Processor | Select-Object -Property Name

    - uses: actions/checkout@v2

    - uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - uses: actions/cache@v2
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-${{ runner.arch }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ runner.arch }}-pip-

    - name: Install deps
      env:
        PIP_DISABLE_PIP_VERSION_CHECK: 1
      run: |
        python -m pip install --user 'wheel==0.36.2'
        python -m pip install --user -r requirements.txt

    - name: Check what we should run
      id: check
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_TOKEN_READONLY: ${{ secrets.GITHUBTOKENREADONLY }}
      run: |
        python -u autobuild.py write-build-plan build_plan.json
        $buildPlan = Get-Content build_plan.json -Raw
        echo "::set-output name=build-plan::$buildPlan"

    - name: Clean up assets
      if: steps.check.outputs.build-plan != '[]'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_TOKEN_READONLY: ${{ secrets.GITHUBTOKENREADONLY }}
      run: |
        python -u autobuild.py clean-assets

    - name: Show build queue
      if: steps.check.outputs.build-plan != '[]'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_TOKEN_READONLY: ${{ secrets.GITHUBTOKENREADONLY }}
      run: |
        python -u autobuild.py show

  build:
    needs: schedule
    timeout-minutes: 4320

    if: ${{ needs.schedule.outputs.build-plan != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.schedule.outputs.build-plan) }}
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.runner }}

    steps:

    - name: Runner details
      run: |
        Get-PSDrive -PSProvider FileSystem
        Get-CIMInstance -Class Win32_Processor | Select-Object -Property Name

    - uses: actions/checkout@v2

    - uses: actions/setup-python@v2
      with:
        python-version: '3.8'
        # Note that ARM64 prior to Win11 requires x86, but this will install x64
        architecture: 'x64'

    - uses: actions/cache@v2
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-${{ runner.arch }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ runner.arch }}-pip-

    - name: Install deps
      env:
        PIP_DISABLE_PIP_VERSION_CHECK: 1
      run: |
        python -m pip install --user 'wheel==0.36.2'
        python -m pip install --user -r requirements.txt

    # Note that ARM64 prior to Win11 requires x86 msys, but this will install x64
    - uses: msys2/setup-msys2@v2
      with:
        msystem: MSYS
        update: true
        install: ${{ matrix.packages }}
        location: 'D:\A'
        release: ${{ runner.arch == 'ARM64' && 'false' || 'true' }}

    - name: Switch to the main mirror
      shell: msys2 {0}
      run: |
        echo 'Server = https://repo.msys2.org/mingw/$repo/' > /etc/pacman.d/mirrorlist.mingw
        echo 'Server = https://repo.msys2.org/msys/$arch/' > /etc/pacman.d/mirrorlist.msys
        grep -qF '[clang32]' /etc/pacman.conf || sed -i '1s|^|[clang32]\nServer = http://repo.msys2.org/mingw/clang32/\n|' /etc/pacman.conf
        grep -qF '[clangarm64]' /etc/pacman.conf || sed -i '1s|^|[clangarm64]\nServer = http://repo.msys2.org/mingw/clangarm64/\n|' /etc/pacman.conf
        pacman-conf.exe

    - name: Update using the main mirror & Check install
      run: |
        msys2 -c 'pacman --noconfirm -Suuy'
        msys2 -c 'pacman --noconfirm -Suu'
        msys2 -c 'pacman -Qkq'

    - name: Install extra packages
      if: ${{ startsWith(matrix.name, 'clang32') || startsWith(matrix.name, 'clangarm64') }}
      run: |
        msys2 -c 'pacman --noconfirm -S --needed mingw-w64-clang-${{ startsWith(matrix.name, 'clangarm64') && 'aarch64' || 'i686' }}-toolchain'

    - name: Init git
      shell: msys2 {0}
      run: |
        git config --global user.email 'ci@msys2.org'
        git config --global user.name 'MSYS2 Continuous Integration'

    - name: Process build queue
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_TOKEN_READONLY: ${{ secrets.GITHUBTOKENREADONLY }}
        GITHUB_RUN_NAME: ${{ matrix.name }}
      run: |
        $env:PACKAGER='CI (msys2-autobuild/' + $env:GITHUB_SHA.Substring(0, 8) + '/' + $env:GITHUB_RUN_ID + ')'
        $BUILD_ROOT='C:\'
        $MSYS2_ROOT=(msys2 -c 'cygpath -w /')
        python -u autobuild.py build ${{ matrix.build-args }} "$MSYS2_ROOT" "$BUILD_ROOT"
